%{
	#include <string>
	#include <vector>
   #define YYSTYPE std::string
   #include "code_parser.tab.h"
   void yyerror(char *s);
   std::vector<std::string> massive_of_tokens;
%}

%token MAN WOMAN
%locate

%token UID_KEYWORD
%token INCLUDE_KEYWORD INCLUDE_KEYWORD_RCML INCLUDE_KEYWORD_RCML_LIB

%type<str> ID STRING UID DEFINE

%%

OPS: OP1 '=' OP2 /*
ssdfsdfsgs
*/ | OPS_1 OP3  { echo("251")} 
   | MAN WOMAN{}
   | UP DOWN '!' TEST {}
;


PROGRAM: UID INCLUDES DEFINES FUNCTIONS
;

UID:
|       UID_KEYWORD STRING
;

INCLUDES:
|           INCLUDE
|           INCLUDES INCLUDE
;

INCLUDE:    INCLUDE_KEYWORD STRING
|           INCLUDE_LIB_KEYWORD ID STRING
;

DEFINES:                       
|           DEFINE
|           DEFINES DEFINE
;

FUNCTIONS:
|           FUNCTION
|           FUNCTIONS FUNCTION
;

FUNCTION:   EXPORT_FLAG FUNCTION_KEYWORD ROBOTS FUNCTION_DELIMETER ID '(' DECLARE_ARGS ')' BLOCK_CODE
|           EXPORT_FLAG FUNCTION_KEYWORD ID '(' DECLARE_ARGS ')' BLOCK_CODE
;

EXPORT_FLAG:
|               EXPORT_KEYWORD
;

ROBOTS: ROBOT_ID
|       ROBOTS ',' ROBOT_ID
;

DECLARE_ARGS:
|       ID
|       DECLARE_ARGS ',' ID
;

BLOCK_CODE: '{' OPERATORS '}'
;

OPERATORS: OPERATOR
|          OPERATORS OPERATOR
;

OPERATOR: FLAG_WAIT ROBOT_LINK ROBOT_POINTER ID ARGS_BLOCK ';'
|         FLAG_WAIT ROBOT_KEYWORD ROBOT_POINTER ID ARGS_BLOCK ';'
|         FLAG_WAIT ROBOT_LINK ROBOT_POINTER '.' ID ARGS_BLOCK ';'
|         FLAG_WAIT ROBOT_KEYWORD ROBOT_POINTER '.' ID ARGS_BLOCK ';'
|         EXPR ';'
|         IF_KEYWORD '(' EXPR ')' BLOCK_CODE
|         IF_KEYWORD '(' EXPR ')' BLOCK_CODE ELSE_KEYWORD BLOCK_CODE
|         LOOP_KEYWORD BLOCK_CODE
|         BREAK_KEYWORD ';'
|         CONTINUE_KEYWORD ';'
|         EXIT_KEYWORD ';'
|         EXIT_KEYWORD EXPR ';'
|         RETURN_KEYWORD ';'
|         RETURN_KEYWORD EXPR ';'
|         DELETE_KEYWORD ROBOT_VAR ';'
|         FLAG_WAIT DELETE_KEYWORD ROBOT_VAR ';'
|         TRY_KEYWORD BLOCK_CODE
|         TRY_KEYWORD ARGS_BLOCK BLOCK_CODE
|         TRY_KEYWORD BLOCK_CODE CATCH_KEYWORD BLOCK_CODE
|         TRY_KEYWORD ARGS_BLOCK BLOCK_CODE CATCH_KEYWORD BLOCK_CODE
|         THROW_KEYWORD ';'
;

EXPR:   EXPR1
|       ROBOT_VAR '=' ROBOT_LINK
|       ROBOT_VAR '=' ROBOT_KEYWORD
|       ID '=' EXPR
|       ID '=' ID
;

EXPR1:  EXPR2
|       EXPR1 EQ EXPR2
|       EXPR1 LE EXPR2
|       EXPR1 GE EXPR2
|       EXPR1 NE EXPR2
|       EXPR1 '>' EXPR2
|       EXPR1 '<' EXPR2
|       EXPR1 AND EXPR2
|       EXPR1 OR EXPR2
;

EXPR2:  TERM
|       EXPR2 '+' TERM
|       EXPR2 '-' TERM
;

TERM:   VAL
|       TERM '*' VAL
|       TERM '/' VAL
|       TERM '%' VAL
;

VAL:    NUM
|       '-' VAL
|       '!' VAL
|       '(' EXPR1 ')'
|       ID
|       ID ARGS_BLOCK
|       ID '.' ID ARGS_BLOCK
|       ROBOT_LINK ROBOT_POINTER ID ARGS_BLOCK
|       ROBOT_KEYWORD ROBOT_POINTER ID ARGS_BLOCK
|       ROBOT_LINK ROBOT_POINTER '.' ID ARGS_BLOCK
|       ROBOT_KEYWORD ROBOT_POINTER '.' ID ARGS_BLOCK
;

ROBOT_LINK: ROBOT_VAR
|           ROBOT_ID
;

FLAG_WAIT:
|           FLAG_WAIT_YES
|           FLAG_WAIT_NO
|           '>'
;

ARGS_BLOCK: '(' ARGS ')'
;

ARGS:
|       ARG
|       ARGS ',' ARG
;

ARG:    EXPR
|       STRING
|       FLAG_WAIT_YES
|       FLAG_WAIT_NO
|       '>'
|       ROBOT_VAR
;
%%


